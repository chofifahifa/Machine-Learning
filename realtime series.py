# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1inX13ZJugR8AgkdVglYd8_2eKkKsJ_Zx

# chofifah fitrotul hasanah
"""

import pandas as pd
from google.colab import files
uploaded = files.upload()

data_train = pd.read_csv('/content/weather_history (1).csv')
data_train = data_train [['Formatted Date', 'Temperature (C)']]
data_train

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

dates = data_train['Formatted Date'].values
temp  = data_train['Temperature (C)'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, temp);

from sklearn.model_selection import train_test_split
import numpy as np

train_size = int(len(data_train)*0.8) # #80% untuk training dan 20% untuk testing
train, test = data_train.iloc[0:train_size], data_train.iloc[train_size:len(data_train)]

print(train.shape, test.shape)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(temp, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
                                    tf.keras.layers.LSTM(60, return_sequences=True),
                                    tf.keras.layers.LSTM(60),
                                    tf.keras.layers.Dropout(0.2),
                                    tf.keras.layers.Dense(30, activation="relu"),
                                    tf.keras.layers.Dense(10, activation="relu"),
                                    tf.keras.layers.Dense(1),
                                    ])

class my_allback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('mae') < 0.1):
            print("MAE has reached below 10%")

    def on_train_end(self, epoch, logs={}):
        print('Done')

callbacks = my_allback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])

history = model.fit(train_set,epochs=100, callbacks=[callbacks], shuffle=False)